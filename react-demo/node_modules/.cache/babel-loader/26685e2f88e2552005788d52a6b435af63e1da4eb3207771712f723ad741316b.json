{"ast":null,"code":"import _toConsumableArray from \"D:/MATERIALE AN 4 SEM 1/SD/proiect/ds2023_30642_fazakas_edina_assignment_1/react-demo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/MATERIALE AN 4 SEM 1/SD/proiect/ds2023_30642_fazakas_edina_assignment_1/react-demo/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"D:/MATERIALE AN 4 SEM 1/SD/proiect/ds2023_30642_fazakas_edina_assignment_1/react-demo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"D:\\\\MATERIALE AN 4 SEM 1\\\\SD\\\\proiect\\\\ds2023_30642_fazakas_edina_assignment_1\\\\react-demo\\\\src\\\\ChatComponent.js\",\n  _this = this,\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nvar ChatComponent = function ChatComponent() {\n  _s();\n  // State variables to manage chat data\n  var _useState = useState(new Map()),\n    _useState2 = _slicedToArray(_useState, 2),\n    privateChats = _useState2[0],\n    setPrivateChats = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    publicChats = _useState4[0],\n    setPublicChats = _useState4[1];\n  var _useState5 = useState(\"CHATROOM\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    tab = _useState6[0],\n    setTab = _useState6[1];\n  var _useState7 = useState({\n      username: '',\n      receivername: '',\n      connected: false,\n      message: ''\n    }),\n    _useState8 = _slicedToArray(_useState7, 2),\n    userData = _useState8[0],\n    setUserData = _useState8[1];\n\n  // useEffect to log userData changes\n  useEffect(function () {\n    console.log(userData);\n  }, [userData]);\n\n  // Function to establish connection with the WebSocket server\n  var connect = function connect() {\n    var Sock = new SockJS('http://localhost:1010/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  // Callback function called on successful connection\n  var onConnected = function onConnected() {\n    setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n      \"connected\": true\n    }));\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe(\"/user/\".concat(userData.username, \"/private\"), onPrivateMessage);\n    userJoin();\n  };\n\n  // Function to send a JOIN message when a user joins\n  var userJoin = function userJoin() {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  // Callback function to handle public messages\n  var onMessageReceived = function onMessageReceived(payload) {\n    var payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        // If the sender is not already in privateChats, add an entry for them\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        // Add public messages to publicChats\n        setPublicChats([].concat(_toConsumableArray(publicChats), [payloadData]));\n        break;\n    }\n  };\n\n  // Callback function to handle private messages\n  var onPrivateMessage = function onPrivateMessage(payload) {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n    // If the sender is in privateChats, add the message to their chat list\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      // If the sender is not in privateChats, create a new list for them\n      var list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  // Callback function for WebSocket errors\n  var onError = function onError(err) {\n    console.log(err);\n  };\n\n  // Function to handle changes in the message input field\n  var handleMessage = function handleMessage(event) {\n    var value = event.target.value;\n    setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n      \"message\": value\n    }));\n  };\n\n  // Function to send public messages\n  var sendValue = function sendValue() {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n        \"message\": \"\"\n      }));\n    }\n  };\n\n  // Function to send private messages\n  var sendPrivateValue = function sendPrivateValue() {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      // If the receiver is not the current user, add the message to their chat list\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n        \"message\": \"\"\n      }));\n    }\n  };\n\n  // Function to handle changes in the username input field\n  var handleUsername = function handleUsername(event) {\n    var value = event.target.value;\n    setUserData(_objectSpread(_objectSpread({}, userData), {}, {\n      \"username\": value\n    }));\n  };\n\n  // Function to register the user and establish a connection\n  var registerUser = function registerUser() {\n    connect();\n  };\n\n  // Render the chat component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ?\n    /*#__PURE__*/\n    // Render the chat interface when the user is connected\n    _jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: function onClick() {\n              setTab(\"CHATROOM\");\n            },\n            className: \"member \".concat(tab === \"CHATROOM\" && \"active\"),\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, _this), _toConsumableArray(privateChats.keys()).map(function (name, index) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: function onClick() {\n                setTab(name);\n              },\n              className: \"member \".concat(tab === name && \"active\"),\n              children: name\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 33\n            }, _this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, _this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map(function (chat, index) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"message \".concat(chat.senderName === userData.username && \"self\"),\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 79\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 37\n              }, _this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 79\n              }, _this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 29\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 44\n      }, _this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: _toConsumableArray(privateChats.get(tab)).map(function (chat, index) {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"message \".concat(chat.senderName === userData.username && \"self\"),\n              children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 79\n              }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-data\",\n                children: chat.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 37\n              }, _this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"avatar self\",\n                children: chat.senderName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 79\n              }, _this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 33\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 44\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, _this) :\n    /*#__PURE__*/\n    // Render the registration interface when the user is not connected\n    _jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, _this);\n};\n_s(ChatComponent, \"x2+nEG+4mNoS0MZFNO542/dMVN4=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatComponent","_s","_useState","Map","_useState2","_slicedToArray","privateChats","setPrivateChats","_useState3","_useState4","publicChats","setPublicChats","_useState5","_useState6","tab","setTab","_useState7","username","receivername","connected","message","_useState8","userData","setUserData","console","log","connect","Sock","onConnected","onError","_objectSpread","subscribe","onMessageReceived","concat","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","_toConsumableArray","push","list","err","handleMessage","event","value","target","sendValue","sendPrivateValue","receiverName","handleUsername","registerUser","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_this","keys","map","name","index","chat","type","placeholder","onChange","id","margin","_c","$RefreshReg$"],"sources":["D:/MATERIALE AN 4 SEM 1/SD/proiect/ds2023_30642_fazakas_edina_assignment_1/react-demo/src/ChatComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { over } from 'stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nvar stompClient = null;\r\n\r\nconst ChatComponent = () => {\r\n    // State variables to manage chat data\r\n    const [privateChats, setPrivateChats] = useState(new Map());\r\n    const [publicChats, setPublicChats] = useState([]);\r\n    const [tab, setTab] = useState(\"CHATROOM\");\r\n    const [userData, setUserData] = useState({\r\n        username: '',\r\n        receivername: '',\r\n        connected: false,\r\n        message: ''\r\n    });\r\n\r\n    // useEffect to log userData changes\r\n    useEffect(() => {\r\n        console.log(userData);\r\n    }, [userData]);\r\n\r\n    // Function to establish connection with the WebSocket server\r\n    const connect = () => {\r\n        let Sock = new SockJS('http://localhost:1010/ws');\r\n        stompClient = over(Sock);\r\n        stompClient.connect({}, onConnected, onError);\r\n    };\r\n\r\n    // Callback function called on successful connection\r\n    const onConnected = () => {\r\n        setUserData({ ...userData, \"connected\": true });\r\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe(`/user/${userData.username}/private`, onPrivateMessage);\r\n        userJoin();\r\n    };\r\n\r\n    // Function to send a JOIN message when a user joins\r\n    const userJoin = () => {\r\n        var chatMessage = {\r\n            senderName: userData.username,\r\n            status: \"JOIN\"\r\n        };\r\n        stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n    };\r\n\r\n    // Callback function to handle public messages\r\n    const onMessageReceived = (payload) => {\r\n        var payloadData = JSON.parse(payload.body);\r\n        switch (payloadData.status) {\r\n            case \"JOIN\":\r\n                // If the sender is not already in privateChats, add an entry for them\r\n                if (!privateChats.get(payloadData.senderName)) {\r\n                    privateChats.set(payloadData.senderName, []);\r\n                    setPrivateChats(new Map(privateChats));\r\n                }\r\n                break;\r\n            case \"MESSAGE\":\r\n                // Add public messages to publicChats\r\n                setPublicChats([...publicChats, payloadData]);\r\n                break;\r\n        }\r\n    };\r\n\r\n    // Callback function to handle private messages\r\n    const onPrivateMessage = (payload) => {\r\n        console.log(payload);\r\n        var payloadData = JSON.parse(payload.body);\r\n        // If the sender is in privateChats, add the message to their chat list\r\n        if (privateChats.get(payloadData.senderName)) {\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        } else {\r\n            // If the sender is not in privateChats, create a new list for them\r\n            let list = [];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName, list);\r\n            setPrivateChats(new Map(privateChats));\r\n        }\r\n    };\r\n\r\n    // Callback function for WebSocket errors\r\n    const onError = (err) => {\r\n        console.log(err);\r\n    };\r\n\r\n    // Function to handle changes in the message input field\r\n    const handleMessage = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"message\": value });\r\n    };\r\n\r\n    // Function to send public messages\r\n    const sendValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n            console.log(chatMessage);\r\n            stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    };\r\n\r\n    // Function to send private messages\r\n    const sendPrivateValue = () => {\r\n        if (stompClient) {\r\n            var chatMessage = {\r\n                senderName: userData.username,\r\n                receiverName: tab,\r\n                message: userData.message,\r\n                status: \"MESSAGE\"\r\n            };\r\n\r\n            // If the receiver is not the current user, add the message to their chat list\r\n            if (userData.username !== tab) {\r\n                privateChats.get(tab).push(chatMessage);\r\n                setPrivateChats(new Map(privateChats));\r\n            }\r\n\r\n            stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n            setUserData({ ...userData, \"message\": \"\" });\r\n        }\r\n    };\r\n\r\n    // Function to handle changes in the username input field\r\n    const handleUsername = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"username\": value });\r\n    };\r\n\r\n    // Function to register the user and establish a connection\r\n    const registerUser = () => {\r\n        connect();\r\n    };\r\n\r\n    // Render the chat component\r\n    return (\r\n        <div className=\"container\">\r\n            {userData.connected ? (\r\n                // Render the chat interface when the user is connected\r\n                <div className=\"chat-box\">\r\n                    <div className=\"member-list\">\r\n                        <ul>\r\n                            <li onClick={() => { setTab(\"CHATROOM\") }} className={`member ${tab === \"CHATROOM\" && \"active\"}`}>Chatroom</li>\r\n                            {[...privateChats.keys()].map((name, index) => (\r\n                                <li onClick={() => { setTab(name) }} className={`member ${tab === name && \"active\"}`} key={index}>{name}</li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    {tab === \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {publicChats.map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\r\n                        </div>\r\n                    </div>}\r\n                    {tab !== \"CHATROOM\" && <div className=\"chat-content\">\r\n                        <ul className=\"chat-messages\">\r\n                            {[...privateChats.get(tab)].map((chat, index) => (\r\n                                <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\r\n                                    {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\r\n                                    <div className=\"message-data\">{chat.message}</div>\r\n                                    {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                        <div className=\"send-message\">\r\n                            <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} />\r\n                            <button type=\"button\" className=\"send-button\" onClick={sendPrivateValue}>send</button>\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            ) : (\r\n                // Render the registration interface when the user is not connected\r\n                <div className=\"register\">\r\n                    <input\r\n                        id=\"user-name\"\r\n                        placeholder=\"Enter your name\"\r\n                        name=\"userName\"\r\n                        value={userData.username}\r\n                        onChange={handleUsername}\r\n                        margin=\"normal\"\r\n                    />\r\n                    <button type=\"button\" onClick={registerUser}>\r\n                        connect\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}