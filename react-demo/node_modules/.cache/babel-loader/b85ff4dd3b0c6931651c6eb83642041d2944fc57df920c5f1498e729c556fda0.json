{"ast":null,"code":"import { HOST } from '../../commons/hosts';\nimport RestApiClient from \"../../commons/api/rest-client\";\nvar endpoint = {\n  device: '/getDevices',\n  deleteDevice: '/deleteDevice',\n  createDevice: '/createDevice',\n  editDevice: '/updateDevice'\n};\nfunction getDevices(secretKey) {\n  var url = HOST.backend_devices + endpoint.device;\n  console.log('Fetching devices with secretKey:', secretKey);\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + sessionStorage.getItem('token'),\n      'Secret-Key': secretKey,\n      'Content-Type': 'application/json'\n    }\n  }).then(function (response) {\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    // Check if response body is not empty\n    if (response.headers.get('content-type') && response.headers.get('content-type').includes('application/json')) {\n      return response.json();\n    } else {\n      return [];\n    }\n  }).catch(function (error) {\n    console.error('Error fetching devices:', error);\n    throw error; // Rethrow the error to propagate it to the caller\n  });\n}\n\nfunction getDeviceById(params, secretKey, callback) {\n  var token = sessionStorage.getItem('token');\n  var request = new Request(HOST.backend_devices + endpoint.device + params.id, {\n    method: 'GET',\n    headers: {\n      'Authorization': \"Bearer \".concat(token),\n      'Secret-Key': secretKey\n    }\n  });\n  RestApiClient.performRequest(request, callback);\n}\nfunction postDevice(device, secretKey, callback) {\n  var token = sessionStorage.getItem('token');\n  var request = new Request(HOST.backend_devices + endpoint.createDevice, {\n    method: 'POST',\n    headers: {\n      'Authorization': \"Bearer \".concat(token),\n      'Secret-Key': secretKey,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(device)\n  });\n  RestApiClient.performRequest(request, callback);\n}\nfunction deleteDevice(id, secretKey, callback) {\n  var token = sessionStorage.getItem('token');\n  var request = new Request(HOST.backend_devices + endpoint.deleteDevice + '/' + id, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': \"Bearer \".concat(token),\n      'Secret-Key': secretKey\n    }\n  });\n  console.log(\"URL: \" + request.url);\n  RestApiClient.performRequest(request, callback);\n}\nfunction editDevice(id, device, secretKey, callback) {\n  var token = sessionStorage.getItem('token');\n  var request = new Request(HOST.backend_devices + endpoint.editDevice + \"/\" + id, {\n    method: 'PATCH',\n    headers: {\n      'Authorization': \"Bearer \".concat(token),\n      'Secret-Key': secretKey,\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(device)\n  });\n  RestApiClient.performRequest(request, callback);\n}\nexport { getDevices, getDeviceById, postDevice, deleteDevice, editDevice };","map":{"version":3,"names":["HOST","RestApiClient","endpoint","device","deleteDevice","createDevice","editDevice","getDevices","secretKey","url","backend_devices","console","log","fetch","method","headers","sessionStorage","getItem","then","response","status","ok","Error","get","includes","json","catch","error","getDeviceById","params","callback","token","request","Request","id","concat","performRequest","postDevice","body","JSON","stringify"],"sources":["D:/MATERIALE AN 4 SEM 1/SD/proiect/ds2023_30642_fazakas_edina_assignment_1/react-demo/src/device/api/device-api.js"],"sourcesContent":["import { HOST } from '../../commons/hosts';\r\nimport RestApiClient from \"../../commons/api/rest-client\";\r\n\r\nconst endpoint = {\r\n    device: '/getDevices',\r\n    deleteDevice: '/deleteDevice',\r\n    createDevice: '/createDevice',\r\n    editDevice: '/updateDevice'\r\n};\r\n\r\nfunction getDevices(secretKey) {\r\n    const url = HOST.backend_devices + endpoint.device;\r\n\r\n    console.log('Fetching devices with secretKey:', secretKey);\r\n\r\n    return fetch(url, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + sessionStorage.getItem('token'),\r\n            'Secret-Key': secretKey,\r\n            'Content-Type': 'application/json',\r\n        },\r\n    })\r\n        .then(response => {\r\n            console.log('Response status:', response.status);\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n\r\n            // Check if response body is not empty\r\n            if (response.headers.get('content-type') && response.headers.get('content-type').includes('application/json')) {\r\n                return response.json();\r\n            } else {\r\n                return [];\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching devices:', error);\r\n            throw error; // Rethrow the error to propagate it to the caller\r\n        });\r\n}\r\n\r\nfunction getDeviceById(params, secretKey, callback) {\r\n    const token = sessionStorage.getItem('token');\r\n    let request = new Request(HOST.backend_devices + endpoint.device + params.id, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Secret-Key': secretKey,\r\n        },\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction postDevice(device, secretKey, callback) {\r\n    const token = sessionStorage.getItem('token');\r\n    let request = new Request(HOST.backend_devices + endpoint.createDevice, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Secret-Key': secretKey,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(device),\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction deleteDevice(id, secretKey, callback) {\r\n    const token = sessionStorage.getItem('token');\r\n    let request = new Request(HOST.backend_devices + endpoint.deleteDevice + '/' + id, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Secret-Key': secretKey,\r\n        },\r\n    });\r\n\r\n    console.log(\"URL: \" + request.url);\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction editDevice(id, device, secretKey, callback) {\r\n    const token = sessionStorage.getItem('token');\r\n    let request = new Request(HOST.backend_devices + endpoint.editDevice + `/` + id, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Secret-Key': secretKey,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(device),\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nexport {\r\n    getDevices,\r\n    getDeviceById,\r\n    postDevice,\r\n    deleteDevice,\r\n    editDevice\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}