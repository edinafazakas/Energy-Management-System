{"version":3,"sources":["commons/api/rest-client.js","commons/images/logo.jpg","commons/images/connectivity-crop.jpg","serviceWorker.js","navigation-bar.js","navigation-bar2.js","home/home.js","commons/errorhandling/api-response-error-message.js","person/components/validators/person-validators.js","commons/hosts.js","person/api/person-api.js","person/components/person-form.js","commons/tables/fields/Field.js","commons/tables/table.js","person/components/person-table.js","person/components/person-delete-form.js","person/components/person-edit-form.js","person/person-container.js","commons/errorhandling/error-page.js","login/login.js","device/components/validators/device-validators.js","device/api/device-api.js","device/components/device-form.js","device/components/device-table.js","device/components/device-delete-form.js","device/components/device-edit-form.js","device/device-container.js","mydevices/api/mydevice-api.js","mydevices/mydevice-container.js","home/home1.js","userDevices/api/userDevice-api.js","userDevices/components/userDevice-table.js","userDevices/userDevice-container.js","app.js","index.js"],"names":["module","exports","performRequest","request","callback","fetch","then","response","ok","json","status","err","catch","Boolean","window","location","hostname","match","textStyle","color","textDecoration","NavigationBar","React","createElement","Navbar","light","expand","NavbarBrand","href","src","logo","width","height","Nav","className","navbar","UncontrolledDropdown","nav","inNavbar","DropdownToggle","style","caret","DropdownMenu","right","DropdownItem","NavLink","NavigationBar2","backgroundStyle","backgroundPosition","backgroundSize","backgroundRepeat","backgroundImage","concat","BackgroundImg","Home","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","Jumbotron","fluid","Container","Button","onClick","open","Component","APIResponseErrorMessage","props","_this","call","toggleForm","bind","_assertThisInitialized","state","error","errorStatus","collapseForm","this","setState","UncontrolledAlert","Modal","isOpen","toggle","ModalHeader","styles","errorTitle","ModalBody","Row","Col","xs","errorText","timestamp","resource","message","path","details","ModalFooter","minLengthValidator","minLength","length","requiredValidator","trim","emailValidator","test","String","toLowerCase","validate","rules","isValid","rule","HOST","endpoint","PersonForm","handleChange","event","name","target","updatedControls","formControls","updatedFormElement","touched","valid","validationRules","formIsValid","updatedFormElementName","reloadHandler","placeholder","isRequired","username","password","handleSubmit","person","_this2","user","Request","method","headers","body","JSON","stringify","console","log","url","RestApiClient","API_USERS","result","alert","reload","registerPerson","FormGroup","id","Label","for","Input","onChange","required","min","max","type","sm","size","offset","disabled","Field","focused","locked","label","_this$state","_this$props","fieldClassName","onFocus","onBlur","htmlFor","defaultProps","Table","_Component","handleRowClick","rowIndex","selectedRowIndex","data","columns","search","filters","pageSize","selectedRow","accepted","forEach","val","accessor","includes","index","header","undefined","forceUpdate","filter","map","ReactTable","resolveData","row","defaultPageSize","showPagination","getTrProps","rowInfo","background","Header","PersonTable","onSelectUser","userID","tableData","display","flexDirection","alignItems","onRowClick","PersonDeleteForm","_objectSpread","formElementName","deletePerson","personId","preventDefault","PersonEditForm","PersonContainer","toggleDeleteForm","isDeleteFormVisible","toggleEditForm","selected","isLoaded","selectedUserId","isEditFormVisible","editingUserId","fetchPersons","_this3","CardHeader","Card","userId","ErrorPage","Login","handleInputChange","_event$target","_defineProperty","loginURL","text","Error","role","history","push","fetchUserDevicesAndRedirect","getUserByUsername","devicesURL","devices","pathname","onSubmit","withRouter","DeviceForm","description","address","max_consumption","device","registerDevice","defaultValue","DeviceTable","justifyContent","DeviceDeleteForm","deleteDevice","deviceID","API_DEVICES","DeviceEditForm","DeviceContainer","toggleDeleteDeviceForm","editingDeviceId","fetchDevices","MyDeviceContainer","fetchUserDevices","prevProps","Home1","UserDeviceTable","UserDeviceContainer","API_USERDEVICES","App","isLoggedIn","back","Router","Switch","Route","exact","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39c12a0f.chunk.js","sourcesContent":["function performRequest(request, callback){\r\n    fetch(request)\r\n        .then(\r\n            function(response) {\r\n                if (response.ok) {\r\n                    response.json().then(json => callback(json, response.status,null));\r\n                }\r\n                else {\r\n                    response.json().then(err => callback(null, response.status,  err));\r\n                }\r\n            })\r\n        .catch(function (err) {\r\n            //catch any other unexpected error, and set custom code for error = 1\r\n            callback(null, 1, err)\r\n        });\r\n}\r\n\r\nmodule.exports = {\r\n    performRequest\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.e0b7e449.jpg\";","module.exports = __webpack_public_path__ + \"static/media/connectivity-crop.a7fc3547.jpg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and person)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              console.log('Content is cached for offline use.');\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport logo from './commons/images/logo.jpg';\r\n\r\nimport {\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Nav,\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavLink,\r\n    UncontrolledDropdown\r\n} from 'reactstrap';\r\n\r\nconst textStyle = {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n};\r\n\r\nconst NavigationBar = () => (\r\n    <div>\r\n        <Navbar color=\"dark\" light expand=\"md\">\r\n            <NavbarBrand href=\"/home\">\r\n\r\n\r\n                <img src={logo} width={\"50\"}\r\n                     height={\"35\"} />\r\n            </NavbarBrand>\r\n            <Nav className=\"mr-auto\" navbar>\r\n\r\n                <UncontrolledDropdown nav inNavbar>\r\n                    <DropdownToggle style={textStyle} nav caret>\r\n                       Menu\r\n                    </DropdownToggle>\r\n                    <DropdownMenu right >\r\n\r\n                        <DropdownItem>\r\n                            <NavLink href=\"/person\">Users</NavLink>\r\n                        </DropdownItem>\r\n\r\n                        <DropdownItem>\r\n                            <NavLink href=\"/device\">Devices</NavLink>\r\n                        </DropdownItem>\r\n\r\n                        <DropdownItem>\r\n                            <NavLink href=\"/userDevices\">User Devices</NavLink>\r\n                        </DropdownItem>\r\n\r\n\r\n\r\n                    </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n\r\n            </Nav>\r\n        </Navbar>\r\n    </div>\r\n);\r\n\r\nexport default NavigationBar\r\n","import React from 'react'\r\nimport logo from './commons/images/logo.jpg';\r\n\r\nimport {\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Nav,\r\n    Navbar,\r\n    NavbarBrand,\r\n    NavLink,\r\n    UncontrolledDropdown\r\n} from 'reactstrap';\r\n\r\nconst textStyle = {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n};\r\n\r\nconst NavigationBar2 = () => (\r\n    <div>\r\n        <Navbar color=\"dark\" light expand=\"md\">\r\n            <NavbarBrand href=\"/home1\">\r\n\r\n\r\n                <img src={logo} width={\"50\"}\r\n                     height={\"35\"} />\r\n            </NavbarBrand>\r\n            <Nav className=\"mr-auto\" navbar>\r\n\r\n                <UncontrolledDropdown nav inNavbar>\r\n                    <DropdownToggle style={textStyle} nav caret>\r\n                        Menu\r\n                    </DropdownToggle>\r\n                    <DropdownMenu right >\r\n\r\n                        {/*<DropdownItem>*/}\r\n                        {/*    <NavLink href=\"/mydevices\">My Devices</NavLink>*/}\r\n                        {/*</DropdownItem>*/}\r\n\r\n                        <DropdownItem>\r\n                            <NavLink href=\"/device\">All Devices</NavLink>\r\n                        </DropdownItem>\r\n\r\n\r\n                    </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n\r\n            </Nav>\r\n        </Navbar>\r\n    </div>\r\n);\r\n\r\nexport default NavigationBar2\r\n","import React from 'react';\r\n\r\nimport BackgroundImg from '../commons/images/connectivity-crop.jpg';\r\n\r\nimport {Button, Container, Jumbotron} from 'reactstrap';\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\nconst textStyle = {color: 'white', };\r\n\r\nclass Home extends React.Component {\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div>\r\n                <Jumbotron fluid style={backgroundStyle}>\r\n                    <Container fluid>\r\n                        <h1 className=\"display-3\" style={textStyle}>Energy Management System</h1>\r\n                        <p className=\"lead\" style={textStyle}> <b>Enabling managing smart energy metering devices.</b> </p>\r\n                        <hr className=\"my-2\"/>\r\n                        <p  style={textStyle}> <b>This assignment represents the first module of the distributed software system for Energy Management that represents the final project\r\n                            for the Distributed Systems course. </b> </p>\r\n                        <p className=\"lead\">\r\n                            <Button color=\"primary\" onClick={() => window.open('http://coned.utcluj.ro/~salomie/DS_Lic/')}>Learn\r\n                                More</Button>\r\n                        </p>\r\n                    </Container>\r\n                </Jumbotron>\r\n\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport {Button, Col, Modal, ModalBody, ModalFooter, ModalHeader, Row, UncontrolledAlert} from 'reactstrap';\r\nimport styles from '../styles/project-style.css';\r\n\r\nclass APIResponseErrorMessage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.state = {\r\n            error: this.props.error,\r\n            errorStatus: this.props.errorStatus,\r\n            collapseForm: false\r\n        }\r\n    }\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n    render()\r\n    {\r\n        return (\r\n            <div>\r\n\r\n                <UncontrolledAlert color=\"danger\">\r\n                    An unexpected error occurred on the server side!\r\n                    { this.state.errorStatus > 1 && <Button color=\"link\"  onClick={this.toggleForm}>Details...</Button>}\r\n                </UncontrolledAlert>\r\n\r\n                { this.state.errorStatus > 1 &&\r\n                <Modal isOpen={this.state.collapseForm} toggle={this.toggleForm}\r\n                       className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggleForm} className={styles.errorTitle}> Server side error information: </ModalHeader>\r\n                    <ModalBody>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Time: </Col>   <Col xs=\"auto\" className={styles.errorText}>{ this.state.error.timestamp} </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Resource : </Col>   <Col xs=\"auto\" className={styles.errorText}>{ this.state.error.resource} </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Error : </Col>   <Col xs=\"auto\" className={styles.errorText}>{ this.state.error.status} - { this.state.error.error} </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Message : </Col>   <Col xs=\"auto\" className={styles.errorText}>{ this.state.error.message} </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Path : </Col>   <Col xs=\"auto\" className={styles.errorText}>{ this.state.error.path} </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col xs=\"3\"> Details : </Col>   <Col xs=\"auto\" className={styles.errorText}>\r\n                            {this.state.error.details}\r\n                        </Col>\r\n                        </Row>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"danger\" onClick={this.toggleForm}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>}\r\n            </div>\r\n        )\r\n    }}\r\nexport default APIResponseErrorMessage\r\n\r\n","\r\nconst minLengthValidator = (value, minLength) => {\r\n    return value.length >= minLength;\r\n};\r\n\r\nconst requiredValidator = value => {\r\n    return value.trim() !== '';\r\n};\r\n\r\nconst emailValidator = value => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(value).toLowerCase());\r\n};\r\n\r\nconst validate = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    for (let rule in rules) {\r\n\r\n        switch (rule) {\r\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]);\r\n                              break;\r\n\r\n            case 'isRequired': isValid = isValid && requiredValidator(value);\r\n                               break;\r\n\r\n            case 'emailValidator': isValid = isValid && emailValidator(value);\r\n                                   break;\r\n\r\n            default: isValid = true;\r\n        }\r\n\r\n    }\r\n\r\n    return isValid;\r\n};\r\n\r\nexport default validate;\r\n","export const HOST = {\r\n    backend_api: 'http://localhost:8080',\r\n    backend_devices: 'http://localhost:9090'\r\n};\r\n","import {HOST} from '../../commons/hosts';\r\nimport RestApiClient from \"../../commons/api/rest-client\";\r\n\r\n\r\nconst endpoint = {\r\n    person: '/users',\r\n    createUser: '/postUser',\r\n    deleteUser: '/deleteUser',\r\n    editUser: '/updateUser',\r\n};\r\n\r\nfunction getPersons(callback) {\r\n    let request = new Request(HOST.backend_api + endpoint.person, {\r\n        method: 'GET',\r\n    });\r\n    console.log(request.url);\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n// function getPersonById(params, callback){\r\n//     let request = new Request(HOST.backend_api + endpoint.person + params.id, {\r\n//        method: 'GET'\r\n//     });\r\n//\r\n//     console.log(request.url);\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n\r\nfunction getUserByUsername(username, callback) {\r\n    let request = new Request(HOST.backend_api + '/findByUsername/' + username, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n\r\n// function getUserById(params, callback){\r\n//     let request = new Request(HOST.backend_api + endpoint.person + params.id, {\r\n//         method: 'GET'\r\n//     });\r\n//\r\n//     console.log(request.url);\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n\r\nfunction deletePerson(id, callback) {\r\n    let request = new Request(HOST.backend_api + endpoint.deleteUser + '/' + id, {\r\n        method: 'DELETE',\r\n    });\r\n\r\n    console.log(\"URL: \" + request.url);\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction createUser(user, callback) {\r\n    let request = new Request(HOST.backend_api + endpoint.createUser, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(user), // Ensure that the user object matches the expected format\r\n    });\r\n\r\n    console.log(\"URL: \" + request.url);\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n\r\nfunction editUser(id, user, callback) {\r\n    let request = new Request(HOST.backend_api + endpoint.editUser + `/` + id, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(user),\r\n    });\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n\r\nexport {\r\n    getPersons,\r\n    deletePerson,\r\n    createUser,\r\n    editUser,\r\n    getUserByUsername\r\n};\r\n","import React from 'react';\r\nimport validate from \"./validators/person-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../api/person-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass PersonForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                name: {\r\n                    value: '',\r\n                    placeholder: 'What is your name?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                username: {\r\n                    value: '',\r\n                    placeholder: 'Username...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: 'Password...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerPerson(person) {\r\n        return API_USERS.createUser(person, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                const response = { message: 'Successfully inserted person with name: ' + result.name };\r\n                alert(response.message);\r\n                console.log(\"Successfully inserted person with id: \" + result);\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let person = {\r\n            name: this.state.formControls.name.value,\r\n            username: this.state.formControls.username.value, // Update to use \"username\"\r\n            password: this.state.formControls.password.value, // Update to use \"password\"\r\n        };\r\n\r\n        console.log(person);\r\n        this.registerPerson(person);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='name'>\r\n                    <Label for='name'> Name: </Label>\r\n                    <Input\r\n                        name='name'\r\n                        id='name'\r\n                        placeholder={this.state.formControls.name.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.name.value} // Use \"value\" instead of \"defaultValue\"\r\n                        touched={this.state.formControls.name.touched ? 1 : 0}\r\n                        valid={this.state.formControls.name.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.name.touched && !this.state.formControls.name.valid &&\r\n                        <div className={\"error-message row\"}> * Name must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='username'>\r\n                    <Label for='username'> Username: </Label>\r\n                    <Input\r\n                        name='username' // Change \"email\" to \"username\"\r\n                        id='username'\r\n                        placeholder={this.state.formControls.username.placeholder} // Use \"username\" instead of \"email\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.username.value} // Use \"value\" instead of \"defaultValue\"\r\n                        touched={this.state.formControls.username.touched ? 1 : 0} // Change \"email\" to \"username\"\r\n                        valid={this.state.formControls.username.valid} // Change \"email\" to \"username\"\r\n                        required\r\n                    />\r\n                    {this.state.formControls.username.touched && !this.state.formControls.username.valid && // Change \"email\" to \"username\"\r\n                        <div className={\"error-message\"}> * Wrong username</div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='password'>\r\n                    <Label for='password'> Password: </Label>\r\n                    <Input\r\n                        name='password'\r\n                        id='password'\r\n                        placeholder={this.state.formControls.password.placeholder} // Use \"password\" instead of \"age\"\r\n                        min={0}\r\n                        max={100}\r\n                        type=\"number\"\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.password.value} // Use \"value\" instead of \"defaultValue\"\r\n                        touched={this.state.formControls.password.touched ? 1 : 0}\r\n                        valid={this.state.formControls.password.valid}\r\n                        required\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles/field-style.css';\r\n\r\nexport default class Field extends React.Component {\r\n    static propTypes = {\r\n        id: PropTypes.string.isRequired,\r\n        locked: PropTypes.bool,\r\n        focused: PropTypes.bool,\r\n        value: PropTypes.string,\r\n        error: PropTypes.string,\r\n        label: PropTypes.string,\r\n        onChange: PropTypes.func,\r\n    };\r\n\r\n    static defaultProps = {\r\n        locked: false,\r\n        focused: false,\r\n        value: '',\r\n        error: '',\r\n        label: '',\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            focused: (props.locked && props.focused) || false,\r\n            value: props.value || '',\r\n            error: props.error || '',\r\n            label: props.label || '',\r\n        };\r\n    }\r\n\r\n    onChange = event => {\r\n        const value = event.target.value;\r\n        this.setState({value, error: ''});\r\n        return this.props.onChange(event);\r\n    };\r\n\r\n    render() {\r\n        const {focused, value, error, label} = this.state;\r\n        const {id, locked} = this.props;\r\n        const fieldClassName = `field ${(locked ? focused : focused || value) && 'focused'} ${locked && !focused && 'locked'}`;\r\n\r\n        return (\r\n            <div className={fieldClassName}>\r\n                <input\r\n                    id={id}\r\n                    type=\"text\"\r\n                    value={value}\r\n                    placeholder={label}\r\n                    onChange={this.onChange}\r\n                    onFocus={() => !locked && this.setState({focused: true})}\r\n                    onBlur={() => !locked && this.setState({focused: false})}\r\n                />\r\n                <label htmlFor={id} className={error && 'error'}>\r\n                    {error || label}\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport Field from \"./fields/Field\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\n\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: props.data,\r\n            columns: props.columns,\r\n            search: props.search,\r\n            filters: [],\r\n            pageSize: props.pageSize || 10,\r\n            selectedRow: null,\r\n        };\r\n    }\r\n\r\n    search() {}\r\n\r\n    filter(data) {\r\n        let accepted = true;\r\n\r\n        this.state.filters.forEach((val) => {\r\n            if (String(val.value) === \"\") {\r\n                accepted = true;\r\n            }\r\n\r\n            if (\r\n                !String(data[val.accessor]).includes(String(val.value)) &&\r\n                !String(val.value).includes(String(data[val.accessor]))\r\n            ) {\r\n                accepted = false;\r\n            }\r\n        });\r\n\r\n        return accepted;\r\n    }\r\n\r\n    handleRowClick = (rowIndex) => {\r\n        this.setState({ selectedRowIndex: rowIndex });\r\n    };\r\n\r\n\r\n\r\n    handleChange(value, index, header) {\r\n        if (this.state.filters === undefined)\r\n            this.setState({ filters: [] });\r\n\r\n        this.state.filters[index] = {\r\n            value: value.target.value,\r\n            accessor: header,\r\n        };\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        let data = this.state.data\r\n            ? this.state.data.filter((data) => this.filter(data))\r\n            : [];\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {this.state.search.map((header, index) => {\r\n                        return (\r\n                            <Col key={index}>\r\n                                <div>\r\n                                    <Field\r\n                                        id={header.accessor}\r\n                                        label={header.accessor}\r\n                                    />\r\n                                </div>\r\n                            </Col>\r\n                        );\r\n                    })}\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <ReactTable\r\n                            data={data}\r\n                            resolveData={(data) => data.map((row) => row)}\r\n                            columns={this.state.columns}\r\n                            defaultPageSize={this.state.pageSize}\r\n                            showPagination={true}\r\n                            getTrProps={(state, rowInfo) => {\r\n                                if (rowInfo) {\r\n                                    return {\r\n                                        onClick: () => this.handleRowClick(rowInfo.index),\r\n                                        style: {\r\n                                            background: rowInfo.index === this.state.selectedRowIndex ? \"#ADD8E6\" : \"white\",\r\n                                        },\r\n                                    };\r\n                                } else {\r\n                                    return {};\r\n                                }\r\n                            }}\r\n\r\n\r\n                        />\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport Table from \"../../commons/tables/table\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        Header: 'userID',\r\n        accessor: 'userID',\r\n        width: 350\r\n    },\r\n    {\r\n        Header: 'Name',\r\n        accessor: 'name',\r\n        width: 200\r\n    },\r\n    {\r\n        Header: 'Role',\r\n        accessor: 'role',\r\n    },\r\n    {\r\n        Header: 'Username',\r\n        accessor: 'username',\r\n    },\r\n    {\r\n        Header: 'Password',\r\n        accessor: 'password',\r\n    },\r\n];\r\n\r\nconst filters = [\r\n    {\r\n        accessor: 'userID',\r\n    }\r\n];\r\n\r\nclass PersonTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: this.props.tableData,\r\n            selectedRow: this.props.selectedRow, // Pass selectedRow from props\r\n        };\r\n    }\r\n\r\n    handleRowClick = (row) => {\r\n        const { onSelectUser } = this.props;\r\n        if (onSelectUser) {\r\n            onSelectUser(row.userID); // Notify the parent component with the selected user's ID\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { tableData, selectedRow } = this.state;\r\n\r\n        const centeredTableStyle = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div style={centeredTableStyle}>\r\n                    <Table\r\n                        data={tableData}\r\n                        columns={columns}\r\n                        search={filters}\r\n                        pageSize={5}\r\n                        selectedRow={selectedRow}\r\n                        onRowClick={this.handleRowClick}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonTable;\r\n","import React from \"react\";\r\nimport { Button, Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport validate from \"./validators/person-validators\";\r\nimport * as API_USERS from \"../api/person-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\n\r\nclass PersonDeleteForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n            formIsValid: false,\r\n            formControls: {\r\n                id: {\r\n                    value: '',\r\n                    placeholder: 'User ID',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        isRequired: true,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ collapseForm: !this.state.collapseForm });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = { ...this.state.formControls }; // Create a shallow copy\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let formElementName in updatedControls) {\r\n            formIsValid = updatedControls[formElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid,\r\n        });\r\n    };\r\n\r\n    deletePerson = () => {\r\n        const personId = this.state.formControls.id.value;\r\n\r\n        API_USERS.deletePerson(personId, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                const response = { message: 'Successfully deleted user with ID: ' + personId };\r\n                alert(response.message);\r\n                console.log(\"Successfully deleted user with ID: \" + personId);\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: error,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault(); // Prevent the default form submission\r\n\r\n        this.deletePerson();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup id='id'>\r\n                    <Label for='id'> Person ID: </Label>\r\n                    <Input\r\n                        name='id'\r\n                        id='id'\r\n                        type='text' // Specify the input type\r\n                        placeholder={this.state.formControls.id.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.id.value}\r\n                        valid={this.state.formControls.id.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.id.touched && !this.state.formControls.id.valid && (\r\n                        <div className={\"error-message row\"}> * This field is required. </div>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{ size: '4', offset: 8 }}>\r\n                        <Button type=\"submit\" disabled={!this.state.formIsValid} onClick={this.handleSubmit}>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.state.errorStatus > 0 && (\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonDeleteForm;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport validate from \"./validators/person-validators\";\r\nimport * as API_USERS from \"../api/person-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\n\r\nclass PersonEditForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n            formIsValid: false,\r\n            formControls: {\r\n                id: {\r\n                    value: '',\r\n                    placeholder: 'User ID...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                name: {\r\n                    value: '',\r\n                    placeholder: 'What is your name?...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                username: {\r\n                    value: '',\r\n                    placeholder: 'Username...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                password: {\r\n                    value: '',\r\n                    placeholder: 'Password...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = { ...this.state.formControls };\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let formElementName in updatedControls) {\r\n            formIsValid = updatedControls[formElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { formControls } = this.state;\r\n        const userId = formControls.id.value;\r\n\r\n        const editedUser = {\r\n            name: formControls.name.value,\r\n            username: formControls.username.value,\r\n            password: formControls.password.value,\r\n        };\r\n\r\n        API_USERS.editUser(userId, editedUser, (result, status, error) => {\r\n            if (status === 200) {\r\n                alert(\"User information updated successfully.\");\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n                //this.props.history.push('/person-container');\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: error,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for=\"id\">User ID</Label>\r\n                    <Input\r\n                        name=\"id\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.id.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.id.value}\r\n                        valid={this.state.formControls.id.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.id.touched && !this.state.formControls.id.valid && (\r\n                        <div className={\"error-message\"}> * This field is required and should have at least 3 characters. </div>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"name\">Name</Label>\r\n                    <Input\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.name.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.name.value}\r\n                        valid={this.state.formControls.name.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.name.touched && !this.state.formControls.name.valid && (\r\n                        <div className={\"error-message\"}> * This field is required and should have at least 3 characters. </div>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"username\">Username</Label>\r\n                    <Input\r\n                        name=\"username\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.username.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.username.value}\r\n                        valid={this.state.formControls.username.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"password\">Password</Label>\r\n                    <Input\r\n                        name=\"password\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.password.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.password.value}\r\n                        valid={this.state.formControls.password.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{ size: '4', offset: 8 }}>\r\n                        <Button type=\"submit\" disabled={!this.state.formIsValid} onClick={this.handleSubmit}>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.state.errorStatus > 0 && (\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonEditForm;\r\n","import React from \"react\";\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport PersonForm from \"./components/person-form\";\r\nimport PersonTable from \"./components/person-table\";\r\nimport * as API_USERS from \"./api/person-api\";\r\nimport PersonDeleteForm from \"./components/person-delete-form\";\r\nimport PersonEditForm from \"./components/person-edit-form\";\r\n\r\nclass PersonContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.toggleDeleteForm = this.toggleDeleteForm.bind(this);\r\n        this.toggleEditForm = this.toggleEditForm.bind(this);\r\n\r\n        this.state = {\r\n            selected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n            selectedUserId: null,\r\n            isDeleteFormVisible: false,\r\n            isEditFormVisible: false,\r\n            editingUserId: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPersons();\r\n    }\r\n\r\n    fetchPersons() {\r\n        API_USERS.getPersons((result, status, err) => {\r\n            if (status === 200) {\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ selected: !this.state.selected });\r\n    }\r\n\r\n    toggleDeleteForm = () => {\r\n        this.setState({ isDeleteFormVisible: !this.state.isDeleteFormVisible });\r\n    };\r\n\r\n    toggleEditForm() {\r\n        this.setState({\r\n            isEditFormVisible: !this.state.isEditFormVisible,\r\n        });\r\n    }\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false,\r\n        });\r\n        this.toggleForm();\r\n        this.fetchPersons();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CardHeader>\r\n                    <strong> Users Management </strong>\r\n                </CardHeader>\r\n                <Card>\r\n                    <br />\r\n                    <Row>\r\n                        <Col sm={{ size: \"8\", offset: 1 }}>\r\n                            <Button color=\"primary\" onClick={this.toggleForm}>\r\n                                Add User\r\n                            </Button>{\" \"}\r\n                            <Button color=\"danger\" onClick={this.toggleDeleteForm}>\r\n                                Delete User\r\n                            </Button>{\" \"}\r\n                            <Button color=\"info\" onClick={this.toggleEditForm}>\r\n                                Edit User\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <Row>\r\n                        <Col sm={{ size: \"9\", offset: 1 }}>\r\n                            {this.state.isLoaded && (\r\n                                <PersonTable\r\n                                    tableData={this.state.tableData}\r\n                                    onSelectUser={(userId) =>\r\n                                        this.setState({ selectedUserId: userId })\r\n                                    }\r\n                                />\r\n                            )}\r\n                            {this.state.errorStatus > 0 && (\r\n                                <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n\r\n                <Modal\r\n                    isOpen={this.state.selected}\r\n                    toggle={this.toggleForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleForm}>Add User:</ModalHeader>\r\n                    <ModalBody>\r\n                        <PersonForm reloadHandler={this.reload} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    isOpen={this.state.isDeleteFormVisible}\r\n                    toggle={this.toggleDeleteForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleDeleteForm}>Delete User:</ModalHeader>\r\n                    <ModalBody>\r\n                        <PersonDeleteForm reloadHandler={this.reload} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    isOpen={this.state.isEditFormVisible}\r\n                    toggle={this.toggleEditForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleEditForm}>Edit User:</ModalHeader>\r\n                    <ModalBody>\r\n                        {/* Pass the user ID to the Edit User form */}\r\n                        <PersonEditForm\r\n                            userId={this.state.editingUserId}\r\n                            reloadHandler={this.reload}\r\n                        />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonContainer;","import React from 'react'\r\nimport styles from '../styles/project-style.css';\r\n\r\nclass ErrorPage extends React.Component {\r\n\r\n    render() {\r\n            return <h3 className={styles.errorTitle}>Page not found.</h3>;\r\n    }\r\n}\r\n\r\nexport default ErrorPage\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './style/login.css';\r\nimport { getUserByUsername } from \"../person/api/person-api\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n        };\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const { username, password } = this.state;\r\n\r\n        const loginURL = `http://localhost:8080/login/${username}/${password}`;\r\n\r\n        fetch(loginURL, {\r\n            method: 'GET',\r\n        })\r\n            .then(response => {\r\n                if (response.status === 200) {\r\n                    return response.text();\r\n                } else {\r\n                    throw new Error('Authentication failed');\r\n                }\r\n            })\r\n            .then(data => {\r\n                const role = data.trim();\r\n                if (role === 'admin') {\r\n                    alert('Login successful: ' + role);\r\n                    this.props.history.push('/home');\r\n                } else if (role === 'client') {\r\n                    alert('Login successful: ' + role);\r\n                    this.fetchUserDevicesAndRedirect(username);\r\n                } else {\r\n                    alert('Invalid user role: ' + role);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error('Network error:', error);\r\n            });\r\n    }\r\n\r\n    fetchUserDevicesAndRedirect = (username) => {\r\n        getUserByUsername(username, (userId) => {\r\n            this.setState({ userID: userId }); // Set the userID in state\r\n            const devicesURL = `http://localhost:9090/getMyDevices/${userId}`;\r\n\r\n            fetch(devicesURL, {\r\n                method: 'GET',\r\n            })\r\n                .then(response => {\r\n                    if (response.status === 200) {\r\n                        return response.json();\r\n                    } else {\r\n                        throw Error('Failed to fetch user devices');\r\n                    }\r\n                })\r\n                .then(devices => {\r\n                    // Redirect to '/home1' with devices and userId as state\r\n                    this.props.history.push({\r\n                        pathname: '/home1',\r\n                        state: { devices, userId },\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    console.error('Failed to fetch user devices:', error);\r\n                });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h2>Login</h2>\r\n                <form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleInputChange}\r\n                        placeholder=\"Username\"\r\n                        className=\"login-input\"\r\n                    />\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.handleInputChange}\r\n                        placeholder=\"Password\"\r\n                        className=\"login-input\"\r\n                    />\r\n                    <button type=\"submit\" className=\"login-button\">Login</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\n","\r\nconst minLengthValidator = (value, minLength) => {\r\n    return value.length >= minLength;\r\n};\r\n\r\nconst requiredValidator = value => {\r\n    return value.trim() !== '';\r\n};\r\n\r\nconst emailValidator = value => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(value).toLowerCase());\r\n};\r\n\r\nconst validate = (value, rules) => {\r\n    let isValid = true;\r\n\r\n    for (let rule in rules) {\r\n\r\n        switch (rule) {\r\n            case 'minLength': isValid = isValid && minLengthValidator(value, rules[rule]);\r\n                              break;\r\n\r\n            case 'isRequired': isValid = isValid && requiredValidator(value);\r\n                               break;\r\n\r\n            case 'emailValidator': isValid = isValid && emailValidator(value);\r\n                                   break;\r\n\r\n            default: isValid = true;\r\n        }\r\n\r\n    }\r\n\r\n    return isValid;\r\n};\r\n\r\nexport default validate;\r\n","import { HOST } from '../../commons/hosts';\r\nimport RestApiClient from \"../../commons/api/rest-client\";\r\n\r\nconst endpoint = {\r\n    device: '/getDevices',\r\n    deleteDevice: '/deleteDevice',\r\n    createDevice: '/createDevice',\r\n    editDevice: '/updateDevice'\r\n};\r\n\r\nfunction getDevices(callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.device, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction getDeviceById(params, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.device + params.id, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction postDevice(user, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.createDevice, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(user)\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction deleteDevice(id, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.deleteDevice + '/' + id, {\r\n        method: 'DELETE',\r\n    });\r\n\r\n    console.log(\"URL: \" + request.url);\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction editDevice(id, device, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.editDevice + `/` + id ,{\r\n        method: 'PATCH', // Use the PATCH method for updating\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(device),\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n\r\nexport {\r\n    getDevices,\r\n    getDeviceById,\r\n    postDevice,\r\n    deleteDevice,\r\n    editDevice\r\n};\r\n","import React from 'react';\r\nimport validate from \"./validators/device-validators\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport * as API_USERS from \"../api/device-api\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport {Col, Row} from \"reactstrap\";\r\nimport { FormGroup, Input, Label} from 'reactstrap';\r\n\r\n\r\n\r\nclass DeviceForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.reloadHandler = this.props.reloadHandler;\r\n\r\n        this.state = {\r\n\r\n            errorStatus: 0,\r\n            error: null,\r\n\r\n            formIsValid: false,\r\n\r\n            formControls: {\r\n                description: {\r\n                    value: '',\r\n                    placeholder: 'Device description',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: 'Address',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                max_consumption: {\r\n                    value: '',\r\n                    placeholder: 'Maximum consumption',\r\n                    valid: false,\r\n                    touched: false,\r\n                }\r\n\r\n            }\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({collapseForm: !this.state.collapseForm});\r\n    }\r\n\r\n\r\n    handleChange = event => {\r\n\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = this.state.formControls;\r\n\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let updatedFormElementName in updatedControls) {\r\n            formIsValid = updatedControls[updatedFormElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid\r\n        });\r\n\r\n    };\r\n\r\n    registerDevice(device) {\r\n        return API_USERS.postDevice(device, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                const response = { message: 'Successfully inserted device with description: ' + result.description };\r\n                alert(response.message);\r\n                console.log(\"Successfully inserted description with id: \" + result);\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState(({\r\n                    errorStatus: status,\r\n                    error: error\r\n                }));\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        let device = {\r\n            description: this.state.formControls.description.value,\r\n            address: this.state.formControls.address.value,\r\n            max_consumption: this.state.formControls.max_consumption.value\r\n        };\r\n\r\n        console.log(device);\r\n        this.registerDevice(device);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <FormGroup id='description'>\r\n                    <Label for='descriptionField'> Description: </Label>\r\n                    <Input\r\n                        name='description'\r\n                        id='descriptionField'\r\n                        placeholder={this.state.formControls.description.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.description.value}\r\n                        touched={this.state.formControls.description.touched ? 1 : 0}\r\n                        valid={this.state.formControls.description.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.description.touched && !this.state.formControls.description.valid &&\r\n                        <div className={\"error-message row\"}> * Description must have at least 3 characters </div>}\r\n                </FormGroup>\r\n\r\n                <FormGroup id='address'>\r\n                    <Label for='addressField'> Address: </Label>\r\n                    <Input\r\n                        name='address'\r\n                        id='addressField'\r\n                        placeholder={this.state.formControls.address.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.address.value}\r\n                        touched={this.state.formControls.address.touched ? 1 : 0}\r\n                        valid={this.state.formControls.address.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                <FormGroup id='max_consumption'>\r\n                    <Label for='maxConsumptionField'> Maximum Consumption: </Label>\r\n                    <Input\r\n                        name='max_consumption'\r\n                        id='maxConsumptionField'\r\n                        placeholder={this.state.formControls.max_consumption.placeholder}\r\n                        onChange={this.handleChange}\r\n                        defaultValue={this.state.formControls.max_consumption.value}\r\n                        touched={this.state.formControls.max_consumption.touched ? 1 : 0}\r\n                        valid={this.state.formControls.max_consumption.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n\r\n                <Row>\r\n                        <Col sm={{size: '4', offset: 8}}>\r\n                            <Button type={\"submit\"} disabled={!this.state.formIsValid} onClick={this.handleSubmit}>  Submit </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                {\r\n                    this.state.errorStatus > 0 &&\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error}/>\r\n                }\r\n            </div>\r\n        ) ;\r\n    }\r\n}\r\n\r\nexport default DeviceForm;\r\n","import React from \"react\";\r\nimport Table from \"../../commons/tables/table\";\r\nimport { Button } from 'reactstrap';\r\nimport { deleteDevice } from \"../api/device-api\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        Header: 'Device ID',\r\n        accessor: 'deviceID',\r\n        width: 350\r\n    },\r\n    {\r\n        Header: 'Description',\r\n        accessor: 'description',\r\n    },\r\n    {\r\n        Header: 'Address',\r\n        accessor: 'address',\r\n    },\r\n    {\r\n        Header: 'Maximum consumption',\r\n        accessor: 'max_consumption',\r\n        width: 200\r\n    },\r\n\r\n];\r\n\r\nconst filters = [\r\n    {\r\n        accessor: 'deviceID',\r\n    }\r\n];\r\n\r\nclass DeviceTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: this.props.tableData\r\n        };\r\n        \r\n    }\r\n    render() {\r\n        const centeredTableStyle = {\r\n            justifyContent: 'center',\r\n        };\r\n\r\n        return (\r\n            <div style={centeredTableStyle}>\r\n                <Table\r\n                    data={this.state.tableData}\r\n                    columns={columns}\r\n                    search={filters}\r\n                    pageSize={5}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeviceTable;\r\n","import React from \"react\";\r\nimport { Button, Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport * as API_DEVICES from \"../../device/api/device-api\";\r\nimport validate from \"./validators/device-validators\";\r\nimport * as API_USERS from \"../../person/api/person-api\";\r\n\r\nclass DeviceDeleteForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n            formIsValid: false,\r\n            formControls: {\r\n                id: {\r\n                    value: '',\r\n                    placeholder: 'Device ID',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        isRequired: true,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ collapseForm: !this.state.collapseForm });\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = { ...this.state.formControls };\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let formElementName in updatedControls) {\r\n            formIsValid = updatedControls[formElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid,\r\n        });\r\n    };\r\n\r\n    deleteDevice = () => {\r\n        const deviceID = this.state.formControls.id.value;\r\n\r\n        API_DEVICES.deleteDevice(deviceID, (result, status, error) => {\r\n            if (result !== null && (status === 200 || status === 201)) {\r\n                const response = { message: 'Successfully deleted device with ID: ' + deviceID };\r\n                alert(response.message);\r\n                console.log(\"Successfully deleted device with ID: \" + deviceID);\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: error,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.deleteDevice();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup id='id'>\r\n                    <Label for='id'> Device ID: </Label>\r\n                    <Input\r\n                        name='id' // Adding the name attribute\r\n                        id='id'\r\n                        type='text'\r\n                        placeholder={this.state.formControls.id.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.id.value}\r\n                        valid={this.state.formControls.id.valid}\r\n                        required\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{ size: '4', offset: 8 }}>\r\n                        <Button type=\"submit\" disabled={!this.state.formIsValid} onClick={this.handleSubmit}>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeviceDeleteForm;\r\n","import React, { Component } from \"react\";\r\nimport { Button, Col, FormGroup, Input, Label, Row } from \"reactstrap\";\r\nimport APIResponseErrorMessage from \"../../commons/errorhandling/api-response-error-message\";\r\nimport validate from \"./validators/device-validators\";\r\nimport * as API_DEVICES from \"../../device/api/device-api\";\r\n\r\nclass DeviceEditForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errorStatus: 0,\r\n            error: null,\r\n            formIsValid: false,\r\n            formControls: {\r\n                id: {\r\n                    value: '',\r\n                    placeholder: 'Device ID...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                description: {\r\n                    value: '',\r\n                    placeholder: 'Description...',\r\n                    valid: false,\r\n                    touched: false,\r\n                    validationRules: {\r\n                        minLength: 3,\r\n                        isRequired: true\r\n                    }\r\n                },\r\n                address: {\r\n                    value: '',\r\n                    placeholder: 'Address...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n                max_consumption: {\r\n                    value: '',\r\n                    placeholder: 'Max consumption...',\r\n                    valid: false,\r\n                    touched: false,\r\n                },\r\n            }\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        const value = event.target.value;\r\n\r\n        const updatedControls = { ...this.state.formControls };\r\n        const updatedFormElement = updatedControls[name];\r\n\r\n        updatedFormElement.value = value;\r\n        updatedFormElement.touched = true;\r\n        updatedFormElement.valid = validate(value, updatedFormElement.validationRules);\r\n        updatedControls[name] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for (let formElementName in updatedControls) {\r\n            formIsValid = updatedControls[formElementName].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({\r\n            formControls: updatedControls,\r\n            formIsValid: formIsValid,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { reloadHandler } = this.props;\r\n        const { formControls } = this.state;\r\n\r\n        const deviceID = formControls.id.value;\r\n\r\n        const editedDevice = {\r\n            address: formControls.address.value,\r\n            description: formControls.description.value,\r\n            max_consumption: formControls.max_consumption.value,\r\n        };\r\n\r\n        API_DEVICES.editDevice(deviceID, editedDevice, (result, status, error) => {\r\n            if (status === 200) {\r\n                alert(\"Device information updated successfully.\");\r\n                window.location.reload();\r\n                this.reloadHandler();\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: error,\r\n                });\r\n            }\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormGroup>\r\n                    <Label for=\"id\">User ID</Label>\r\n                    <Input\r\n                        name=\"id\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.id.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.id.value}\r\n                        valid={this.state.formControls.id.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.id.touched && !this.state.formControls.id.valid && (\r\n                        <div className={\"error-message\"}> * This field is required and should have at least 3 characters. </div>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"description\">Description</Label>\r\n                    <Input\r\n                        name=\"description\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.description.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.description.value}\r\n                        valid={this.state.formControls.description.valid}\r\n                        required\r\n                    />\r\n                    {this.state.formControls.description.touched && !this.state.formControls.description.valid && (\r\n                        <div className={\"error-message\"}> * This field is required and should have at least 3 characters. </div>\r\n                    )}\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"address\">Address</Label>\r\n                    <Input\r\n                        name=\"address\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.address.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.address.value}\r\n                        valid={this.state.formControls.address.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                    <Label for=\"max_consumption\">Maximum Consumption</Label>\r\n                    <Input\r\n                        name=\"max_consumption\"\r\n                        type=\"text\"\r\n                        placeholder={this.state.formControls.max_consumption.placeholder}\r\n                        onChange={this.handleChange}\r\n                        value={this.state.formControls.max_consumption.value}\r\n                        valid={this.state.formControls.max_consumption.valid}\r\n                    />\r\n                </FormGroup>\r\n\r\n                <Row>\r\n                    <Col sm={{ size: '4', offset: 8 }}>\r\n                        <Button type=\"submit\" disabled={!this.state.formIsValid} onClick={this.handleSubmit}>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.state.errorStatus > 0 && (\r\n                    <APIResponseErrorMessage errorStatus={this.state.errorStatus} error={this.state.error} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeviceEditForm;\r\n","import React from 'react';\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row\r\n} from 'reactstrap';\r\nimport DeviceForm from \"./components/device-form\";\r\n\r\nimport * as API_DEVICES from \"./api/device-api\"; // Import the device API functions\r\nimport DeviceTable from \"./components/device-table\";\r\nimport DeviceDeleteForm from \"./components/device-delete-form\";\r\nimport DeviceEditForm from \"./components/device-edit-form\";\r\nclass DeviceContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.toggleForm = this.toggleForm.bind(this);\r\n        this.toggleEditForm = this.toggleEditForm.bind(this);\r\n\r\n        this.reload = this.reload.bind(this);\r\n        this.state = {\r\n            selected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n            isDeleteFormVisible: false,\r\n            isEditFormVisible: false,\r\n            editingDeviceId: null,\r\n            username: '',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchDevices();\r\n    }\r\n\r\n    fetchDevices() {\r\n        return API_DEVICES.getDevices((result, status, err) => { // Use API_DEVICES to fetch devices\r\n\r\n            if (result !== null && status === 200) {\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleForm() {\r\n        this.setState({ selected: !this.state.selected });\r\n    }\r\n\r\n    toggleEditForm() {\r\n        this.setState({\r\n            isEditFormVisible: !this.state.isEditFormVisible,\r\n        });\r\n    }\r\n\r\n    toggleDeleteDeviceForm = () => {\r\n        this.setState({ isDeleteFormVisible: !this.state.isDeleteFormVisible });\r\n    };\r\n\r\n    reload() {\r\n        this.setState({\r\n            isLoaded: false\r\n        });\r\n        this.toggleForm();\r\n        this.fetchDevices();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CardHeader>\r\n                    <strong> Devices Management </strong>\r\n                </CardHeader>\r\n                <Card>\r\n                    <br/>\r\n                    <Row>\r\n                        <Col sm={{ size: '8', offset: 1 }}>\r\n                            <Button color=\"primary\" onClick={this.toggleForm}>Add Device</Button>{\" \"}\r\n                            <Button color=\"danger\" onClick={this.toggleDeleteDeviceForm}>\r\n                                Delete Device\r\n                            </Button>{\" \"}\r\n                            <Button color=\"info\" onClick={this.toggleEditForm}>\r\n                                Edit Device\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <br/>\r\n                    <Row>\r\n                        <Col sm={{ size: '9', offset: 1 }}>\r\n                            {this.state.isLoaded && <DeviceTable tableData={this.state.tableData}/>}\r\n                            {this.state.errorStatus > 0 && <APIResponseErrorMessage\r\n                                errorStatus={this.state.errorStatus}\r\n                                error={this.state.error}\r\n                            />}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n\r\n                <Modal isOpen={this.state.selected} toggle={this.toggleForm} className={this.props.className} size=\"lg\">\r\n                    <ModalHeader toggle={this.toggleForm}>Add Device:</ModalHeader>\r\n                    <ModalBody>\r\n                        <DeviceForm reloadHandler={this.reload}/>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    isOpen={this.state.isDeleteFormVisible}\r\n                    toggle={this.toggleDeleteDeviceForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleDeleteDeviceForm}>Delete Device:</ModalHeader>\r\n                    <ModalBody>\r\n                        <DeviceDeleteForm reloadHandler={this.reload} />\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n\r\n                <Modal\r\n                    isOpen={this.state.isEditFormVisible}\r\n                    toggle={this.toggleEditForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleEditForm}>Edit Device:</ModalHeader>\r\n                    <ModalBody>\r\n                        {/* Pass the user ID to the Edit User form */}\r\n                        <DeviceEditForm\r\n                            deviceID={this.state.editingDeviceId}\r\n                            reloadHandler={this.reload}\r\n                        />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeviceContainer;\r\n","import { HOST } from '../../commons/hosts';\r\nimport RestApiClient from \"../../commons/api/rest-client\";\r\n\r\nconst endpoint = {\r\n    device: '/getDevices',\r\n    deleteDevice: '/deleteDevice',\r\n    createDevice: '/createDevice',\r\n    editDevice: '/updateDevice',\r\n    getClientsDevices: '/getClientsDevices'\r\n};\r\n\r\nfunction getDevices(callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.device, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction getDeviceById(params, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.device + params.id, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction postDevice(user, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.createDevice, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(user)\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction deleteDevice(id, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.deleteDevice + '/' + id, {\r\n        method: 'DELETE',\r\n    });\r\n\r\n    console.log(\"URL: \" + request.url);\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction getMyDevices(userId, callback) {\r\n    let request = new Request(`${HOST.backend_devices}/getMyDevices/` + userId, {\r\n        method: 'GET',\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction editDevice(id, device, callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.editDevice + `/` + id ,{\r\n        method: 'PATCH', // Use the PATCH method for updating\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(device),\r\n    });\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\nfunction getClientsDevices(userId, callback) {\r\n    let request = new Request(`${HOST.backend_devices}${endpoint.getClientsDevices}/` + userId, {\r\n        method: 'GET',\r\n    });\r\n\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n\r\nexport {\r\n    getDevices,\r\n    getDeviceById,\r\n    postDevice,\r\n    deleteDevice,\r\n    editDevice,\r\n    getMyDevices,\r\n    getClientsDevices\r\n};\r\n","import React, { Component } from 'react';\r\nimport { Card, CardHeader, Col, Row } from 'reactstrap';\r\nimport DeviceTable from '../device/components/device-table';\r\nimport * as API_DEVICES from './api/mydevice-api';\r\nimport APIResponseErrorMessage from '../commons/errorhandling/api-response-error-message';\r\n\r\nclass MyDeviceContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n            isDeleteFormVisible: false,\r\n            isEditFormVisible: false,\r\n            editingDeviceId: null,\r\n            username: '',\r\n            userId: this.props.userId, // Access userId from props\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUserDevices();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.userId !== prevProps.userId) {\r\n            this.fetchUserDevices();\r\n        }\r\n    }\r\n\r\n    fetchUserDevices() {\r\n        console.log('UserId in MyDeviceContainer:', this.props.userId);\r\n\r\n        if (!this.props.userId) {\r\n            console.error('UserID is missing.');\r\n            return;\r\n        }\r\n\r\n        API_DEVICES.getClientsDevices(this.props.userId, (result, status, err) => {\r\n            if (result !== null && status === 200) {\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CardHeader>\r\n                    <strong>View My Devices</strong>\r\n                </CardHeader>\r\n                <Card>\r\n                    <br />\r\n                    <Row>\r\n                        <Col sm={{ size: '9', offset: 1 }}>\r\n                            {this.state.isLoaded ? (\r\n                                <DeviceTable tableData={this.state.tableData} />\r\n                            ) : (\r\n                                'Loading data...'\r\n                            )}\r\n                            {this.state.errorStatus > 0 && (\r\n                                <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MyDeviceContainer;\r\n","import React from 'react';\r\nimport BackgroundImg from '../commons/images/connectivity-crop.jpg';\r\nimport { Button, Container, Jumbotron } from 'reactstrap';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport MyDeviceContainer from \"../mydevices/mydevice-container\";\r\n\r\nconst backgroundStyle = {\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    backgroundRepeat: 'no-repeat',\r\n    width: \"100%\",\r\n    height: \"1920px\",\r\n    backgroundImage: `url(${BackgroundImg})`\r\n};\r\n\r\nconst textStyle = { color: 'white' };\r\n\r\nclass Home1 extends React.Component {\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Jumbotron fluid style={backgroundStyle}>\r\n                    <Container fluid>\r\n                        <h1 className=\"display-3\" style={textStyle}>Energy Management System</h1>\r\n                        <p className=\"lead\" style={textStyle}> <b>Enabling managing smart energy metering devices.</b> </p>\r\n                        <hr className=\"my-2\" />\r\n                        <p style={textStyle}> <b>This assignment represents the first module of the distributed software system for Energy Management that represents the final project for the Distributed Systems course. </b> </p>\r\n                        <p className=\"lead\">\r\n                            <Button color=\"primary\" onClick={() => window.open('http://coned.utcluj.ro/~salomie/DS_Lic/')}>Learn More</Button>\r\n                        </p>\r\n                    </Container>\r\n                </Jumbotron>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Home1);\r\n","import {HOST} from '../../commons/hosts';\r\nimport RestApiClient from \"../../commons/api/rest-client\";\r\n\r\n\r\nconst endpoint = {\r\n    userDevices: '/getUserDevices',\r\n    createUser: '/postUser',\r\n    deleteUser: '/deleteUser',\r\n    editUser: '/updateUser',\r\n};\r\n\r\nfunction getUserDevices(callback) {\r\n    let request = new Request(HOST.backend_devices + endpoint.userDevices, {\r\n        method: 'GET',\r\n    });\r\n    console.log(request.url);\r\n    RestApiClient.performRequest(request, callback);\r\n}\r\n\r\n// function getPersonById(params, callback){\r\n//     let request = new Request(HOST.backend_api + endpoint.person + params.id, {\r\n//        method: 'GET'\r\n//     });\r\n//\r\n//     console.log(request.url);\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n//\r\n// function getUserById(params, callback){\r\n//     let request = new Request(HOST.backend_api + endpoint.person + params.id, {\r\n//         method: 'GET'\r\n//     });\r\n//\r\n//     console.log(request.url);\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n//\r\n// function deletePerson(id, callback) {\r\n//     let request = new Request(HOST.backend_api + endpoint.deleteUser + '/' + id, {\r\n//         method: 'DELETE',\r\n//     });\r\n//\r\n//     console.log(\"URL: \" + request.url);\r\n//\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n//\r\n// function createUser(user, callback) {\r\n//     let request = new Request(HOST.backend_api + endpoint.createUser, {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'Accept': 'application/json',\r\n//             'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(user), // Ensure that the user object matches the expected format\r\n//     });\r\n//\r\n//     console.log(\"URL: \" + request.url);\r\n//\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n//\r\n//\r\n// function editUser(id, user, callback) {\r\n//     let request = new Request(HOST.backend_api + endpoint.editUser + `/` + id, {\r\n//         method: 'PATCH',\r\n//         headers: {\r\n//             'Accept': 'application/json',\r\n//             'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(user),\r\n//     });\r\n//\r\n//     RestApiClient.performRequest(request, callback);\r\n// }\r\n\r\n\r\nexport {\r\n    getUserDevices,\r\n    // getPersonById,\r\n    // deletePerson,\r\n    // createUser,\r\n    // editUser\r\n};\r\n","import React from \"react\";\r\nimport Table from \"../../commons/tables/table\";\r\n\r\n\r\nconst columns = [\r\n    {\r\n        Header: 'ID',\r\n        accessor: 'id',\r\n        width: 350\r\n    },\r\n    {\r\n        Header: 'User ID',\r\n        accessor: 'userid',\r\n        width: 350\r\n    },\r\n    {\r\n        Header: 'Device ID',\r\n        accessor: 'deviceid',\r\n        width: 350\r\n    },\r\n\r\n];\r\n\r\nconst filters = [\r\n    {\r\n        accessor: 'id',\r\n    }\r\n];\r\n\r\nclass UserDeviceTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: this.props.tableData,\r\n            selectedRow: this.props.selectedRow, // Pass selectedRow from props\r\n        };\r\n    }\r\n\r\n    handleRowClick = (row) => {\r\n        const { onSelectUser } = this.props;\r\n        if (onSelectUser) {\r\n            onSelectUser(row.id); // Notify the parent component with the selected user's ID\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { tableData, selectedRow } = this.state;\r\n\r\n        const centeredTableStyle = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <div style={centeredTableStyle}>\r\n                    <Table\r\n                        data={tableData}\r\n                        columns={columns}\r\n                        search={filters}\r\n                        pageSize={5}\r\n                        selectedRow={selectedRow}\r\n                        onRowClick={this.handleRowClick}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserDeviceTable;\r\n","import React from \"react\";\r\nimport APIResponseErrorMessage from \"../commons/errorhandling/api-response-error-message\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalHeader,\r\n    Row,\r\n} from \"reactstrap\";\r\nimport * as API_USERDEVICES from \"./api/userDevice-api\";\r\nimport UserDeviceTable from \"./components/userDevice-table\";\r\nimport PersonForm from \"../person/components/person-form\";\r\n\r\nclass UserDeviceContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selected: false,\r\n            collapseForm: false,\r\n            tableData: [],\r\n            isLoaded: false,\r\n            errorStatus: 0,\r\n            error: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUserDevices();\r\n    }\r\n\r\n    fetchUserDevices() {\r\n        API_USERDEVICES.getUserDevices((result, status, err) => {\r\n            if (status === 200) {\r\n                this.setState({\r\n                    tableData: result,\r\n                    isLoaded: true,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    errorStatus: status,\r\n                    error: err,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    toggleForm = () => {\r\n        this.setState({ selected: !this.state.selected });\r\n    }\r\n\r\n    reload = () => {\r\n        this.setState({\r\n            isLoaded: false,\r\n        });\r\n        this.toggleForm();\r\n        this.fetchUserDevices();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CardHeader>\r\n                    <strong> User Devices Management </strong>\r\n                </CardHeader>\r\n                <Card>\r\n                    <br />\r\n                    <Row>\r\n                        <Col sm={{ size: \"9\", offset: 1 }}>\r\n                            {this.state.isLoaded && (\r\n                                <UserDeviceTable\r\n                                    tableData={this.state.tableData}\r\n                                />\r\n                            )}\r\n                            {this.state.errorStatus > 0 && (\r\n                                <APIResponseErrorMessage\r\n                                    errorStatus={this.state.errorStatus}\r\n                                    error={this.state.error}\r\n                                />\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n\r\n                <Modal\r\n                    isOpen={this.state.selected}\r\n                    toggle={this.toggleForm}\r\n                    className={this.props.className}\r\n                    size=\"lg\"\r\n                >\r\n                    <ModalHeader toggle={this.toggleForm}>Add User:</ModalHeader>\r\n                    <ModalBody>\r\n                        <PersonForm reloadHandler={this.reload} />\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserDeviceContainer;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport NavigationBar from './navigation-bar';\r\nimport NavigationBar2 from \"./navigation-bar2\";\r\nimport Home from './home/home';\r\nimport PersonContainer from './person/person-container';\r\nimport ErrorPage from './commons/errorhandling/error-page';\r\nimport styles from './commons/styles/project-style.css';\r\nimport Login from \"./login/login\";\r\nimport DeviceContainer from \"./device/device-container\";\r\nimport Home1 from \"./home/home1\";\r\nimport UserDeviceContainer from \"./userDevices/userDevice-container\";\r\nimport MyDeviceContainer from \"./mydevices/mydevice-container\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoggedIn: false,\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.back}>\r\n                <Router>\r\n                    <div>\r\n                        <Switch>\r\n                            <Route\r\n                                exact\r\n                                path='/'\r\n                                render={() => <Login />}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path='/home'\r\n                                render={() => (\r\n                                    <div>\r\n                                        <NavigationBar />\r\n                                        <Home />\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path='/home1'\r\n                                render={() => (\r\n                                    <div>\r\n                                        <NavigationBar2 />\r\n                                        <Home1 />\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path='/person'\r\n                                render={() => <PersonContainer />}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path='/userDevices'\r\n                                render={() => <UserDeviceContainer />}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path='/device'\r\n                                render={() => <DeviceContainer />}\r\n                            />\r\n                            <Route\r\n                                exact\r\n                                path=\"/mydevices\"\r\n                                render={() =>  <MyDeviceContainer/>} />\r\n                            <Route\r\n                                exact\r\n                                path='/error'\r\n                                render={() => <ErrorPage />}\r\n                            />\r\n                            <Route render={() => <ErrorPage />} />\r\n                        </Switch>\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app'\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}